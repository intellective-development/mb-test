/* UTILS */
@function strip-units($number) {
  @return $number / ($number * 0 + 1);
}

/* LAYOUT */
@mixin flex-center {
  display: flex;
  flex-direction: row;
  justify-content: center;
  align-items: center;
}

@mixin flex-bottom {
  display: flex;
  flex-direction: column;
  justify-content: flex-end;
}

@mixin eq-grid-container {
  //TODO: use mixins
  display: flex !important;
  flex-direction: row;
  flex-wrap: wrap;
  justify-content: space-between;
}

@mixin eq-grid-horizontal($breakpoint) { // goes stacked -> adjacent
  @include eq-grid-container;
  .eq-el {
    max-width: $breakpoint;
    width: 100%;
    height: initial;
  }
}

@mixin eq-grid-vertical($breakpoint) { // goes adjacent -> stacked. note: this has never been tested or used
  @include eq-grid-container;
  .eq-el {
    max-height: $breakpoint;
    height: 100%;
  }
}

@mixin hover-no-mobile {
  body:not(.is-mobile) &:hover {
    @content;
  }
}

@mixin hide-for-small {
  @media only screen and (max-width: $small-max-width){
    display: none;
  }
}

@mixin side-margins-below-medium {
  @media screen and (max-width: $grid-breakpoint) {
    margin-left: $mobile-side-margin;
    margin-right: $mobile-side-margin;
  }
}


// These two mixins work due to visibility's weird animation behavior:
// 1) Uses its time as a delay, so it always switches at the end of the specified time
// 2) Is always visible while animating (in either direction)
@mixin visibility-transition-base($duration: 0.2s) {
  transition: background $duration ease-in-out, visibility $duration ease-in-out, opacity $duration ease-in-out;
}

@mixin visibility-transition-invisible {
  opacity: 0;
  visibility: hidden;
}

@mixin visibility-transition-visible {
  opacity: 1;
  visibility: visible;
}


// TODO: the n-x-grid's should either be folded into the flex grid or removed completely

/* BLOCK GRID */
// all assume that all elements have a bottom and left border
@mixin one-x-grid($border) {
  &:nth-child(1) {
    border-top: $border;
  }
  &:nth-child(2), &:nth-child(3), &:nth-child(4) {
    border-top: 0;
  }
  &:nth-child(1n) {
    border-right: $border;
  }
}

@mixin two-x-grid($border) {
  &:nth-child(1), &:nth-child(2) {
    border-top: $border;
  }
  &:nth-child(3), &:nth-child(4) {
    border-top: 0;
  }
  &:nth-child(2n), &:last-child {
    border-right: $border;
  }
}

@mixin three-x-grid($border) {
  &:nth-child(4) {
    border-top: 0;
  }
  &:nth-child(1), &:nth-child(2), &:nth-child(3) {
    border-top: $border;
  }
  &:nth-child(3n), &:last-child {
    border-right: $border;
  }
}

@mixin four-x-grid($border) {
  &:nth-child(1),
    &:nth-child(2),
    &:nth-child(3),
    &:nth-child(4) {
    border-top: $border;
  }
  &:nth-child(4n), &:last-child {
    border-right: $border;
  }
}

@mixin overflow-ellipsis {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}
// flexbox has a different min width set. without this, the whitespace: nowrap will make it grow infinitely.
@mixin flex-child-overflow-ellipsis { min-width: 0 }
// tables do not play nicely with nowrap, need to remove the nowrap item from the layout
@mixin table-overflow-ellipsis {
  width: 0;
  min-width: 100%
}
// this terrible thing makes the last border inside grid not effed up
@mixin last-border($border) { /* this fixes the off by 1px border, but is unreliable */
  &:last-child {
    border-right: 0px;
  }
  &:last-child::after {
    border-right: $border;
    position: absolute;
    top: 0px;
    right: 0px;
    content: "";
    height: 100%;
    width: 1px;
  }
}

@mixin background-image-auto-height($width, $height){
  padding-top: percentage($height / $width);
}

@mixin flex-spread-elements{
  display: flex;
  justify-content: space-between;

  >:first-child { text-align: left; }
  >:last-child { text-align: right; }
}

@mixin triangle-up($size, $color){
  border: $size transparent solid;
  border-bottom-color: $color;
}

// contents stolen from foundation
$arrow-size: 10px;
@mixin dropdown-top-arrow($left: 10px, $right: auto){
  &::before, &::after {
    content: "";
    display: block;
    width: 0;
    height: 0;
  }
  &::before{
    @include triangle-up($arrow-size, $brand-white);

    position: absolute;
    top: $arrow-size * -2;
    left: $left;
    right: $right;
    z-index: 99;
  }
  &::after {
    @include triangle-up($arrow-size + 1, $brand-light-grey);

    position: absolute;
    top: ($arrow-size + 1) * -2;
    left: $left - 1px;
    right: $right - 1px;
    z-index: 98;
  }
}

// TYPOGRAPHY
@mixin font-size($value: 16) {
  font-size: $value + px;
  font-size: translate-rem($value);
}

@mixin hr_inset_text($font-size: 16, $thickness: 1px, $color: $brand-medium-grey, $padding: 1em) {
  @include font-size($font-size);

  text-align: center;
  color: $color;
  overflow: hidden;

  &::before,
  &::after {
    background-color: $color;
    content: "";
    display: inline-block;
    height: $thickness;
    position: relative;
    vertical-align: middle;
    width: 50%;
  }

  &::before {
    right: $padding;
    margin-left: -50%;
  }

  &::after {
    left: $padding;
    margin-right: -50%;
  }
}

// assuming the base font size is 16px
@function translate-rem($value) {
  @return ($value / strip-units($mb-em-base)) + rem;
}

// Light text on Dark Background anti-aliasing
@mixin pixel-antialiased {
  -webkit-font-smoothing: antialiased;
}

// this is necessary to override some foundation styles, and force the disabled buttons to never change color
@mixin button-disabled-color($background, $border, $text, $opacity: 1) {
  &[disabled],
  &[disabled]:hover,
  &[disabled]:focus,
  &[disabled]:active,
  &[disabled]:visited {
    opacity: $opacity;
    background-color: $background;
    border-color: $border;
    color: $text;
  }
}
